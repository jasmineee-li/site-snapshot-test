from typing import Protocol, List, Literal, Dict, Optional

DOMState = Literal["visible", "hidden", "attached"]

# Storage scope for read_storage()
StorageScope = Literal["auto", "session", "local"]


class Computer(Protocol):
    """Defines the 'shape' (methods/properties) our loop expects."""

    def get_environment(self) -> Literal["windows", "mac", "linux", "browser"]: ...

    def get_dimensions(self) -> tuple[int, int]: ...

    def screenshot(self) -> str: ...

    def click(self, x: int, y: int, button: str = "left") -> None: ...

    def double_click(self, x: int, y: int) -> None: ...

    def scroll(self, x: int, y: int, scroll_x: int, scroll_y: int) -> None: ...

    def type(self, text: str) -> None: ...

    def wait(self, ms: int = 1000) -> None: ...

    def move(self, x: int, y: int) -> None: ...

    def keypress(self, keys: List[str]) -> None: ...

    def drag(self, path: List[Dict[str, int]]) -> None: ...

    def get_current_url() -> str: ...

    # Navigation helpers
    def goto(self, url: str) -> None: ...
    def back(self) -> None: ...

    # Selector-based DOM helpers
    def dom_click(
        self, selector: str, button: str = "left", timeout_ms: int = 10000
    ) -> None: ...
    def dom_type(
        self, selector: str, text: str, submit: bool = False, timeout_ms: int = 10000
    ) -> None: ...
    def dom_read_text(self, selector: str, timeout_ms: int = 10000) -> str: ...
    def dom_wait_for(
        self, selector: str, state: DOMState = "visible", timeout_ms: int = 10000
    ) -> bool: ...
    def dom_exists(self, selector: str, timeout_ms: int = 0) -> bool: ...
    def dom_screenshot(
        self, selector: str, timeout_ms: int = 10000
    ) -> Optional[str]: ...

    # NEW: storage reader for your read_memory tool
    def read_storage(self, key: str, scope: StorageScope = "auto") -> str: ...
